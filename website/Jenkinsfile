pipeline {
    agent { 
        label 'eclipse'
    }

    environment {
        PATH = "/root/.bun/bin:${env.PATH}"
    }

    stages {
        stage('Filter') {
            when {
                anyOf {
                    branch 'main'
                    branch 'staging'
                }
            }

            steps {
                script {
                    // Get list of changes from last successful build
                    def changeLogSets = currentBuild.changeSets
                    def changedFiles = []
                    changeLogSets.each { set ->
                        set.each { entry ->
                            entry.affectedFiles.each { file ->
                                changedFiles.add(file.path)
                            }
                        }
                    }

                    // Proceed if changes in directory
                    def proceed = changedFiles.any { it.startsWith('website/') }

                    if (!proceed) {
                        error('No changes in website, skipping deploy.')
                    }
                }
            }
        }

        stage('Install') {
            when {
                anyOf {
                    branch 'main'
                    branch 'staging'
                }
            }

            steps {
                echo 'Installing dependencies..'

                sh '''
                    for item in ./* ./.*; do
                        if [ "$item" != "./website" ] && [ "$item" != "./." ] && [ "$item" != "./.." ]; then
                            rm -rf "$item";
                        fi;
                    done

                    cd website

                    bun i || true
                '''
            }
        }

        stage('Build') {
            when {
                anyOf {
                    branch 'main'
                    branch 'staging'
                }
            }

            environment {
                DOPPLER_TOKEN = credentials("""${sh(
                    returnStdout: true,
                    script: '''
                        if [ "$BRANCH_NAME" = "staging" ]; then
                            echo 1580e34f-f25b-43da-8461-191dcfdcc099;
                        else
                            echo 1ea76aa9-6809-44e8-80a1-a795b8578952;
                        fi
                    '''
                )}""")
            }

            steps {
                script {
                    if (env.BRANCH_NAME == 'staging') {
                        env.DEPLOY_PATH = '/home/jenkins/iUnstable0_Personal-Website/Staging/Website'
                    } else {
                        env.DEPLOY_PATH = '/home/jenkins/iUnstable0_Personal-Website/Main/Website'
                    }
                }

                echo 'Building..'

                sh '''
                    cd website;

                    if [ -d ${DEPLOY_PATH}/.next ]; then
                        echo "Copying .next from last successful build";

                        error=false;

                        cp -a ${DEPLOY_PATH}/.next .next || error=true;

                        [ $error = true ] && echo "Failed to copy .next from last successful build";
                        [ $error = false ] && echo "Copied .next from last successful build";
                    else
                        echo "No .next found in last successful build";
                    fi

                    DOPPLER_TOKEN=${DOPPLER_TOKEN} bun run build || true
                '''
            }
        }

        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'staging'
                }
            }

            environment {
                DOPPLER_TOKEN = credentials("""${sh(
                    returnStdout: true,
                    script: '''
                        if [ "$BRANCH_NAME" = "staging" ]; then
                            echo 1580e34f-f25b-43da-8461-191dcfdcc099;
                        else
                            echo 1ea76aa9-6809-44e8-80a1-a795b8578952;
                        fi
                    '''
                )}""")
            }

            steps {
                script {
                    // Override the DOPPLER_TOKEN for the staging branch
                    if (env.BRANCH_NAME == 'staging') {
                        env.DEPLOY_PATH = '/home/jenkins/iUnstable0_Personal-Website/Staging'
                        env.PM2_NAME = "@iUnstable0/Personal-Website/Staging-Website"
                        env.BUN_COMMAND = 'staging'
                    } else {
                        env.DEPLOY_PATH = '/home/jenkins/iUnstable0_Personal-Website/Main'
                        env.PM2_NAME = "@iUnstable0/Personal-Website/Website"
                        env.BUN_COMMAND = 'start'
                    }
                }

                echo 'Deploying....'

                sh '''
                    if pm2 list | grep -q "${PM2_NAME}"; then
                        pm2 stop "${PM2_NAME}";
                    fi

                    mkdir -p ${DEPLOY_PATH};

                    rsync -aPq website/ ${DEPLOY_PATH}/Website/;

                    if pm2 list | grep -q "${PM2_NAME}"; then
                        DOPPLER_TOKEN=${DOPPLER_TOKEN} pm2 restart "${PM2_NAME}" --update-env;
                    else
                        cd ${DEPLOY_PATH}/Website;
                        DOPPLER_TOKEN=${DOPPLER_TOKEN} FORCE_COLOR=1 pm2 start "bun run ${BUN_COMMAND}" --name "${PM2_NAME}";
                    fi

                    pm2 save
                '''

                // Very important to run this seperated from the above script block
                // I forgot why ðŸ’€
                sh 'rm -rf *;'
            }
        }
    }
}